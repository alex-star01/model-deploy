# -*- coding: utf-8 -*-
"""UTS-2702275794-no2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1s2zE35P4SJ_eyejQTpO-6U_u1zq_VtT-
"""

import pandas as pd
import numpy as np
import pickle
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.metrics import accuracy_score, classification_report
from sklearn.ensemble import RandomForestClassifier
from xgboost import XGBClassifier

class DataPreprocessor:
    def __init__(self, file_path):
        self.file_path = file_path
        self.df = pd.read_csv(file_path)

    def clean_data(self):
        categorical_cols = self.df.select_dtypes(include=['object']).columns
        le = LabelEncoder()
        for col in categorical_cols:
            self.df[col] = le.fit_transform(self.df[col].astype(str))


        numeric_cols = self.df.select_dtypes(include=['int64', 'float64']).drop(columns='booking_status').columns
        scaler = StandardScaler()
        self.df[numeric_cols] = scaler.fit_transform(self.df[numeric_cols])

        return self.df

    def split_data(self):
        X = self.df.drop(columns='booking_status')
        y = self.df['booking_status']
        return train_test_split(X, y, test_size=0.2, random_state=42)

class ModelTrainer:
    def __init__(self, model_type='xgboost'):
        if model_type == 'random_forest':
            self.model = RandomForestClassifier(random_state=42)
        elif model_type == 'xgboost':
            self.model = XGBClassifier(use_label_encoder=False, eval_metric='logloss', random_state=42)
        else:
            raise ValueError("Model type not supported. Use 'random_forest' or 'xgboost'.")

    def train(self, X_train, y_train):
        self.model.fit(X_train, y_train)

    def evaluate(self, X_test, y_test):
        y_pred = self.model.predict(X_test)
        acc = accuracy_score(y_test, y_pred)
        report = classification_report(y_test, y_pred)
        return acc, report

    def save_model(self, filename='best_model.pkl'):
        with open(filename, 'wb') as f:
            pickle.dump(self.model, f)

if __name__ == "__main__":
    preprocessor = DataPreprocessor('Dataset_B_hotel.csv')
    df_cleaned = preprocessor.clean_data()
    X_train, X_test, y_train, y_test = preprocessor.split_data()


    trainer = ModelTrainer(model_type='random_forest')
    trainer.train(X_train, y_train)
    acc, report = trainer.evaluate(X_test, y_test)

    print(f"Accuracy: {acc}")
    print("Classification Report:\n", report)


    trainer.save_model()